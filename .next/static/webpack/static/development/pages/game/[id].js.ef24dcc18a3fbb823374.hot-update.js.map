{"version":3,"file":"static/webpack/static/development/pages/game/[id].js.ef24dcc18a3fbb823374.hot-update.js","sources":["webpack:///./api/firebase.ts","webpack:///./component/game.tsx"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// DB types\ndeclare global {\n  interface User {\n    id: string;\n    created_at: number;\n  }\n\n  interface Options {\n    name: string;\n  }\n\n  interface Player {\n    id: string;\n    name: string;\n    score: {\n      15: number;\n      16: number;\n      17: number;\n      18: number;\n      19: number;\n      20: number;\n      bull: number;\n      total: number; // This shouldn't exist, it should just be calculated from the other values, but that's more work\n    };\n  }\n\n  interface Game {\n    id: string;\n    creator_id: string;\n    join_id: string;\n    players: Array<Player>;\n  }\n\n  interface Error {\n    message: string;\n  }\n}\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst db = firebase.database();\n\nconst DEFAULT_SCORE = {\n  20: 0,\n  19: 0,\n  18: 0,\n  17: 0,\n  16: 0,\n  15: 0,\n  bull: 0,\n  total: 0\n};\n\nexport function getUser(userID: string): Promise<User> {\n  return db\n    .ref(\"/users/\" + userID)\n    .once(\"value\")\n    .then(function(snapshot) {\n      const user = snapshot.val();\n      if (user) {\n        return { ...user, id: userID };\n      }\n\n      return createUser(userID);\n    });\n}\n\nfunction createUser(userID): Promise<User> {\n  const user = {\n    created_at: Date.now()\n  };\n\n  return new Promise((resolve, reject) => {\n    db.ref(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve({ ...user, id: userID });\n    });\n  });\n}\n\nexport function getGame(\n  gameID: string,\n  userID: string,\n  onUpdate: any\n): Promise<Game> {\n  return new Promise((resolve, reject) => {\n    db.ref(\"/games/\" + gameID).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\n\nexport function getGameId(join_id: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games\")\n      .orderByChild(\"join_id\")\n      .equalTo(join_id)\n      .on(\"value\", function(snapshot) {\n        snapshot.forEach(function(data) {\n          const id = data.key;\n          if (!id) {\n            reject(\"Game not found.\");\n          } else {\n            resolve(id);\n          }\n        });\n      });\n  });\n}\n\nexport function createGame(userID, name): Promise<Game> {\n  const gameID = uuidv4();\n\n  const game = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    players: [\n      {\n        id: userID,\n        name,\n        score: DEFAULT_SCORE\n      }\n    ]\n  };\n\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve({ ...game, id: gameID });\n      }\n    });\n  });\n}\n\nexport function addPlayerToGame(gameID, userID, name) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        if (!game.players.some(player => player.id === userID)) {\n          const newGame = {\n            ...game,\n            players: game.players.concat({\n              id: userID,\n              name,\n              score: DEFAULT_SCORE\n            })\n          };\n\n          db.ref(\"games/\" + gameID).update(newGame, error => {\n            if (error) {\n              console.error(\"error\", error);\n            }\n          });\n        }\n      });\n  });\n}\n\nexport function updateScore(gameID, userID, number) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        const newGame = { ...game };\n        newGame.players =\n          newGame.players.length > 2\n            ? handleThreePlayerGame(userID, newGame.players, number)\n            : handleTwoPlayerGame(userID, newGame.players, number);\n\n        db.ref(\"games/\" + gameID).set(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      });\n  });\n}\n\nexport function resetScore(gameID, userID) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        const newGame = { ...game };\n        newGame.players = newGame.players.map(player => {\n          if (player.id !== userID) {\n            return player;\n          }\n\n          return { ...player, score: DEFAULT_SCORE };\n        });\n\n        db.ref(\"games/\" + gameID).set(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      });\n  });\n}\n\nexport function newGame(gameID) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        const newGame = { ...game };\n        newGame.players = newGame.players.map(player => {\n          return { ...player, score: DEFAULT_SCORE };\n        });\n\n        db.ref(\"games/\" + gameID).set(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      });\n  });\n}\n\nfunction handleTwoPlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  let newPlayers = originalPlayers.slice();\n\n  newPlayers = newPlayers.map(player => {\n    if (player.id !== userID) {\n      return player;\n    }\n\n    const newPlayer = { ...player };\n    const scoreForNumber = newPlayer.score[number];\n    if (scoreForNumber === 3) {\n      // Update other scores\n      newPlayer.score.total += typeof number === \"string\" ? 50 : number;\n    } else {\n      newPlayer.score[number] = scoreForNumber + 1;\n    }\n\n    return { ...newPlayer };\n  });\n\n  return newPlayers;\n}\n\nfunction handleThreePlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  let newPlayers = originalPlayers.slice();\n  const amAddingToOtherPlayers = newPlayers.some(player => {\n    if (player.id === userID && player.score[number] === 3) {\n      return true;\n    }\n  });\n\n  if (amAddingToOtherPlayers) {\n    newPlayers = newPlayers.map(player => {\n      const newPlayer = { ...player };\n      if (newPlayer.score[number] !== 3 && newPlayer.id !== userID) {\n        newPlayer.score.total += typeof number === \"string\" ? 50 : number;\n      }\n      return { ...newPlayer };\n    });\n  } else {\n    newPlayers = newPlayers.map(player => {\n      if (player.id !== userID) {\n        return player;\n      }\n\n      const newPlayer = { ...player };\n      const scoreForNumber = newPlayer.score[number];\n      newPlayer.score[number] = scoreForNumber + 1;\n\n      return { ...newPlayer };\n    });\n  }\n\n  return newPlayers;\n}\n\n// const data = {\n//   games: {\n//     \"one\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"7yzh\"\n//     },\n//     \"two\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"8n0a\"\n//     }\n//   }\n\n// }\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { useGetUserID } from \"../effects/user\";\nimport { updateScore, resetScore, newGame } from \"../api/firebase\";\n\n// 2 person, closed + highest score\n// 3 person, closed + lowest score\n\nexport default function Game(props) {\n  const { join_id, players, id: gameID, creator_id } = props;\n  const userID = useGetUserID();\n  const highestScore = players.reduce((acc, player) => {\n    if (player.score.total > acc) {\n      return player.score.total;\n    } else {\n      return acc;\n    }\n  }, 0);\n\n  const lowestScore = players.reduce((acc, player) => {\n    if (player.score.total < acc) {\n      return player.score.total;\n    } else {\n      return acc;\n    }\n  }, Infinity);\n\n  const creator = players.find(player => player.id === creator_id);\n\n  let hasWinner = false;\n  let winnerName;\n  for (var i = 0; i < players.length; i++) {\n    const player = players[i];\n    const scores = player.score;\n    const total =\n      scores[15] +\n      scores[16] +\n      scores[17] +\n      scores[18] +\n      scores[19] +\n      scores[20] +\n      scores[\"bull\"];\n\n    if (total === 21) {\n      if (players.length > 2) {\n        // Does player have the lowest score?\n        const isLowest = players.some(player => {\n          return player.score.total === lowestScore;\n        });\n\n        if (isLowest) {\n          hasWinner = true;\n          winnerName = player.name;\n        }\n      } else {\n        // Does player have the highest score?\n        const isHighest = players.some(player => {\n          return player.score.total === highestScore;\n        });\n\n        if (isHighest) {\n          hasWinner = true;\n          winnerName = player.name;\n        }\n      }\n    }\n  }\n\n  return (\n    <div>\n      {hasWinner ? (\n        <div>\n          <h1>Winner winner for {winnerName}!</h1>\n          {creator && creator.id === userID ? (\n            <button\n              className=\"bg-orange-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-8\"\n              onClick={() => newGame(gameID)}\n            >\n              New Game\n            </button>\n          ) : (\n            <div className=\"text-sm mt-4\">\n              Waiting for the host to start a new game...\n            </div>\n          )}\n        </div>\n      ) : (\n        <ScoreBoard players={players} gameID={gameID} />\n      )}\n    </div>\n  );\n}\n\nfunction ScoreBoard(props) {\n  const { players, gameID } = props;\n  const userID = useGetUserID();\n\n  return (\n    <div>\n      <div className=\"chalkboard mt-10 bg-teal-700 mx-2 chalk text-white border-b-8 shadow-xl\">\n        <div className=\"flex\">\n          <div className=\"score__column flex flex-col justify-center align-center\">\n            {[\"\", 20, 19, 18, 17, 16, 15, \"bull\"].map(value => {\n              return (\n                <div\n                  key={value}\n                  className=\"score__item px-2 flex items-center justify-center\"\n                >\n                  <span>{value}</span>\n                </div>\n              );\n            })}\n          </div>\n          {players.map(({ id, name, score }) => {\n            const isMine = id === userID;\n            return (\n              <div key={id} className=\"score__column\">\n                <div\n                  className={classnames(\n                    \"score__item text-center border-gray-400 p-5\",\n                    {\n                      \"bg-teal-600\": isMine\n                    }\n                  )}\n                >\n                  <div>{name}</div>\n                  <div>{score.total}</div>\n                </div>\n                {[20, 19, 18, 17, 16, 15, \"bull\"].map(number => {\n                  return (\n                    <ScoreRow\n                      key={number}\n                      number={number}\n                      score={score[number]}\n                      playerID={id}\n                      gameID={gameID}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <button\n        className=\"bg-orange-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-8\"\n        onClick={() => resetScore(gameID, userID)}\n      >\n        Reset Score\n      </button>\n    </div>\n  );\n}\n\nfunction ScoreRow(props) {\n  const { number, score, gameID, playerID } = props;\n  const userID = useGetUserID();\n  const isMine = playerID === userID;\n\n  function handleUpdateScore() {\n    updateScore(gameID, userID, number);\n  }\n\n  return (\n    <div className=\"score__item flex items-stretch relative\">\n      <button\n        disabled={!isMine}\n        onClick={() => handleUpdateScore()}\n        className={classnames(\"flex-1 text-white ont-bold w-100\", {\n          \"bg-teal-600 hover:bg-teal-500\": isMine\n        })}\n      >\n        {score === 0 ? \"\" : score}\n      </button>\n    </div>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AC1UA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAGA;AAIA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;A","sourceRoot":""}