{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst db = firebase.database(); // DB types\n\nexport function getUser(userID) {\n  return db.ref(\"/users/\" + userID).once(\"value\").then(function (snapshot) {\n    const user = snapshot.val();\n\n    if (user) {\n      return _objectSpread({}, user, {\n        id: userID\n      });\n    }\n\n    return createUser(userID);\n  });\n}\n\nfunction createUser(userID) {\n  const user = {\n    created_at: Date.now()\n  };\n  return new Promise((resolve, reject) => {\n    db.ref(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve(_objectSpread({}, user, {\n        id: userID\n      }));\n    });\n  });\n}\n\nexport function getGame(gameID, userID, onUpdate) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"/games/\" + gameID).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\nexport function getGameId(join_id) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games\").orderByChild(\"join_id\").equalTo(join_id).on(\"value\", function (snapshot) {\n      snapshot.forEach(function (data) {\n        const id = data.key;\n\n        if (!id) {\n          reject(\"Game not found.\");\n        } else {\n          resolve(id);\n        }\n      });\n    });\n  });\n}\n\nfunction createGame(gameID, userID) {\n  const game = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    players: [{\n      id: userID\n    }]\n  };\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(_objectSpread({}, game, {\n          id: gameID\n        }));\n      }\n    });\n  });\n}\n\nexport function addPlayerToGame(gameID, userID) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).once(\"value\").then(snapshot => {\n      const game = snapshot.val();\n\n      if (!game.players.some(player => player.id !== userID)) {\n        const newGame = _objectSpread({}, game, {\n          players: game.players.concat({\n            id: userID\n          })\n        });\n\n        db.ref(\"games/\" + gameID).update(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      }\n    });\n  });\n} // const data = {\n//   games: {\n//     \"one\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"7yzh\"\n//     },\n//     \"two\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"8n0a\"\n//     }\n//   }\n// }","map":{"version":3,"sources":["/Users/sean/Workspace/darts/api/firebase.ts"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","db","database","getUser","userID","ref","once","then","snapshot","user","val","id","createUser","created_at","Date","now","Promise","resolve","reject","set","error","getGame","gameID","onUpdate","on","game","getGameId","join_id","orderByChild","equalTo","forEach","data","key","createGame","creator_id","slice","players","addPlayerToGame","some","player","newGame","concat","update","console"],"mappings":"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","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst db = firebase.database();\n\n// DB types\ndeclare global {\n  interface User {\n    id: string;\n    created_at: number;\n  }\n\n  interface Player {\n    id: string;\n  }\n\n  interface Game {\n    id: string;\n    creator_id: string;\n    join_id: string;\n    players: Array<Player>;\n  }\n\n  interface Error {\n    message: string;\n  }\n}\n\nexport function getUser(userID: string): Promise<User> {\n  return db\n    .ref(\"/users/\" + userID)\n    .once(\"value\")\n    .then(function(snapshot) {\n      const user = snapshot.val();\n      if (user) {\n        return { ...user, id: userID };\n      }\n\n      return createUser(userID);\n    });\n}\n\nfunction createUser(userID): Promise<User> {\n  const user = {\n    created_at: Date.now()\n  };\n\n  return new Promise((resolve, reject) => {\n    db.ref(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve({ ...user, id: userID });\n    });\n  });\n}\n\nexport function getGame(\n  gameID: string,\n  userID: string,\n  onUpdate: any\n): Promise<Game> {\n  return new Promise((resolve, reject) => {\n    db.ref(\"/games/\" + gameID).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\n\nexport function getGameId(join_id: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games\")\n      .orderByChild(\"join_id\")\n      .equalTo(join_id)\n      .on(\"value\", function(snapshot) {\n        snapshot.forEach(function(data) {\n          const id = data.key;\n          if (!id) {\n            reject(\"Game not found.\");\n          } else {\n            resolve(id);\n          }\n        });\n      });\n  });\n}\n\nfunction createGame(gameID, userID): Promise<Game> {\n  const game = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    players: [\n      {\n        id: userID\n      }\n    ]\n  };\n\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve({ ...game, id: gameID });\n      }\n    });\n  });\n}\n\nexport function addPlayerToGame(gameID, userID) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        if (!game.players.some(player => player.id !== userID)) {\n          const newGame = {\n            ...game,\n            players: game.players.concat({ id: userID })\n          };\n\n          db.ref(\"games/\" + gameID).update(newGame, error => {\n            if (error) {\n              console.error(\"error\", error);\n            }\n          });\n        }\n      });\n  });\n}\n\n// const data = {\n//   games: {\n//     \"one\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"7yzh\"\n//     },\n//     \"two\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"8n0a\"\n//     }\n//   }\n\n// }\n"]},"metadata":{},"sourceType":"module"}