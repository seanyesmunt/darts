{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { getGame } from \"../api/firebase\";\nimport { useGetUserID } from \"./user\";\nvar GAME_ID = \"game_id\";\nexport function useGetGame(gameID, options) {\n  var userID = useGetUserID();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      game = _React$useState2[0],\n      setGame = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      error = _React$useState4[0],\n      setError = _React$useState4[1];\n\n  React.useEffect(function () {\n    function onUpdate(value) {\n      setGame(_objectSpread({}, value, {\n        id: gameID\n      }));\n    }\n\n    if (gameID && userID) {\n      getGame(gameID, userID, options, onUpdate);\n    }\n  }, [gameID, userID]);\n  return [game, error];\n}\nexport function useGetGameID(_ref) {\n  var options = _ref.options;\n\n  var _useGetGame = useGetGame(undefined, options),\n      _useGetGame2 = _slicedToArray(_useGetGame, 1),\n      game = _useGetGame2[0];\n\n  var gameID = game && game.id;\n  return gameID;\n}","map":{"version":3,"sources":["/Users/sean/Workspace/darts/effects/game.ts"],"names":["React","getGame","useGetUserID","GAME_ID","useGetGame","gameID","options","userID","useState","game","setGame","error","setError","useEffect","onUpdate","value","id","useGetGameID","undefined"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,YAAT,QAA6B,QAA7B;AAEA,IAAMC,OAAO,GAAG,SAAhB;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqD;AAC1D,MAAMC,MAAM,GAAGL,YAAY,EAA3B;;AAD0D,wBAElCF,KAAK,CAACQ,QAAN,EAFkC;AAAA;AAAA,MAEnDC,IAFmD;AAAA,MAE7CC,OAF6C;;AAAA,yBAGhCV,KAAK,CAACQ,QAAN,EAHgC;AAAA;AAAA,MAGnDG,KAHmD;AAAA,MAG5CC,QAH4C;;AAK1DZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AACpB,aAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvBL,MAAAA,OAAO,mBAAMK,KAAN;AAAaC,QAAAA,EAAE,EAAEX;AAAjB,SAAP;AACD;;AAED,QAAIA,MAAM,IAAIE,MAAd,EAAsB;AACpBN,MAAAA,OAAO,CAACI,MAAD,EAASE,MAAT,EAAiBD,OAAjB,EAA0BQ,QAA1B,CAAP;AACD;AACF,GARD,EAQG,CAACT,MAAD,EAASE,MAAT,CARH;AAUA,SAAO,CAACE,IAAD,EAAOE,KAAP,CAAP;AACD;AAED,OAAO,SAASM,YAAT,OAA2C;AAAA,MAAnBX,OAAmB,QAAnBA,OAAmB;;AAAA,oBACjCF,UAAU,CAACc,SAAD,EAAYZ,OAAZ,CADuB;AAAA;AAAA,MACzCG,IADyC;;AAEhD,MAAMJ,MAAM,GAAGI,IAAI,IAAIA,IAAI,CAACO,EAA5B;AAEA,SAAOX,MAAP;AACD","sourcesContent":["import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Cookies from \"js-cookie\";\nimport { getGame } from \"../api/firebase\";\nimport { useGetUserID } from \"./user\";\n\nconst GAME_ID = \"game_id\";\n\nexport function useGetGame(gameID, options): [Game, Error?] {\n  const userID = useGetUserID();\n  const [game, setGame] = React.useState<Game>();\n  const [error, setError] = React.useState<Error>();\n\n  React.useEffect(() => {\n    function onUpdate(value) {\n      setGame({ ...value, id: gameID });\n    }\n\n    if (gameID && userID) {\n      getGame(gameID, userID, options, onUpdate);\n    }\n  }, [gameID, userID]);\n\n  return [game, error];\n}\n\nexport function useGetGameID({ options }): string {\n  const [game] = useGetGame(undefined, options);\n  const gameID = game && game.id;\n\n  return gameID;\n}\n"]},"metadata":{},"sourceType":"module"}