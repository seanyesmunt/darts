{"ast":null,"code":"var _jsxFileName = \"/Users/sean/Workspace/darts/component/game.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport { useGetUserID } from \"../effects/user\";\nimport { updateGameScore, resetScore } from \"../api/firebase\"; // 2 person, closed + highest score\n// 3 person, closed + lowest score\n\nexport default function Game(props) {\n  const {\n    join_id,\n    players,\n    id: gameID,\n    creator_id,\n    score_events: scoreEvents = []\n  } = props;\n  const userID = useGetUserID(); // Initialize score object based on how many players there are\n\n  let score = players.reduce((scoreObject, player) => {\n    return _objectSpread({}, scoreObject, {\n      [player.id]: {\n        20: 0,\n        19: 0,\n        15: 0,\n        18: 0,\n        17: 0,\n        16: 0,\n        25: 0,\n        total: 0\n      }\n    });\n  }, {}); // For each `score_event`, update the score for everyone\n\n  scoreEvents.forEach(scoreEvent => {\n    const {\n      user_id: userID,\n      hit_value: hitValue\n    } = scoreEvent;\n    const usersScoreForHitValue = score[userID][hitValue];\n\n    if (usersScoreForHitValue < 3) {\n      score[userID][hitValue] += 1;\n    } else {\n      // Add score to other players that don't have hitValue closed out\n      players.forEach(player => {\n        const playersScoreForHitValue = score[player.id][hitValue];\n\n        if (playersScoreForHitValue < 3) {\n          score[player.id].total += hitValue;\n        }\n      });\n    }\n  });\n  const [highestScore, lowestScore] = Object.values(score).reduce((acc, score) => {\n    const [currentHighest, currentLowest] = acc;\n    let newHighest;\n    let newLowest;\n\n    if (score.total > currentHighest) {\n      newHighest = score.total;\n    }\n\n    if (score.total < currentLowest) {\n      newLowest = score.total;\n    }\n\n    return [newHighest || currentHighest, newLowest || currentLowest];\n  }, [0, Infinity]);\n  const creator = players.find(player => player.id === creator_id);\n  let hasWinner = false;\n  let winnerName;\n  Object.keys(score).forEach(userID => {\n    const scoreForUserID = score[userID];\n\n    if (scoreForUserID >= 21) {\n      // Does player have the highest score?\n      const isHighest = score.total === highestScore;\n\n      if (isHighest) {\n        hasWinner = true;\n        winnerName = player.name;\n      }\n    }\n  }); //   <div className=\"mx-auto\">\n  //     <img src=\"/winner.png\" className=\"w-full max-w-md md:mt-8 px-8\" />\n  //     <h1 className=\"chalk text-6xl px-8\">Nice one {winnerName}!</h1>\n  //     <div className=\"px-8\">\n  //       {creator && creator.id === userID ? (\n  //         <button\n  //           className=\"mt-4 md:mt-24 w-full md:w-auto text-2xl bg-teal-500 hover:bg-teal-700 text-white py-2 px-4 rounded-lg shadow\"\n  //           onClick={() => newGame(gameID)}\n  //         >\n  //           New Game\n  //         </button>\n  //       ) : (\n  //         <div className=\"text-sm my-16\">\n  //           Waiting for the host to start the another game...\n  //         </div>\n  //       )}\n  //     </div>\n  //   </div>\n  // )\n\n  return __jsx(\"div\", {\n    className: \"flex-col overflow-x-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, __jsx(ScoreBoard, {\n    score: score,\n    gameID: gameID,\n    players: players,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), __jsx(\"button\", {\n    className: \"mt-24 mb-4 md:w-auto text-2xl bg-gray-800 hover:bg-teal-700 text-white py-2 px-4 text-xs rounded-lg shadow\",\n    onClick: () => resetScore(gameID, userID),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, \"Reset Score\"));\n}\n\nfunction ScoreBoard(props) {\n  const {\n    players,\n    gameID,\n    score\n  } = props;\n  const userID = useGetUserID();\n  return __jsx(\"div\", {\n    className: \"mt-4 md:mt-8 text-sm md:text-2xl bg-teal-800 rounded-lg chalk\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"score__column flex flex-col justify-center align-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, [\"\", 20, 19, 18, 17, 16, 15, 25].map((value, index) => {\n    return __jsx(\"div\", {\n      key: value,\n      className: `score__item h-16 ${index === 0 ? \"h-24\" : \"\"} md:h-24 px-4 flex items-center justify-center`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 19\n      }\n    }, value));\n  })), Object.keys(score).map(userIDForScore => {\n    const player = players.find(player => player.id === userIDForScore);\n    const userScore = score[userIDForScore];\n    const isMine = userIDForScore === userID;\n    return __jsx(\"div\", {\n      key: userIDForScore,\n      className: \"score__column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: classnames(\"score__item h-24 md:h-24 w-24 text-center pt-2 \", {\n        \"bg-teal-700\": isMine\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"text-lg md:text-md text-gray-300\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 19\n      }\n    }, player.name), __jsx(\"div\", {\n      className: \"text-4xl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }\n    }, userScore.total)), [20, 19, 18, 17, 16, 15, 25].map(number => {\n      return __jsx(ScoreRow, {\n        key: number,\n        number: number,\n        score: score[userIDForScore][number],\n        playerID: userIDForScore,\n        gameID: gameID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }\n      });\n    }));\n  }))));\n}\n\nfunction ScoreRow(props) {\n  const {\n    number,\n    score,\n    gameID,\n    playerID\n  } = props;\n  const userID = useGetUserID();\n  const isMine = playerID === userID;\n\n  function handleupdateGameScore() {\n    updateGameScore(gameID, userID, number);\n  }\n\n  return __jsx(\"div\", {\n    className: \"score__item h-16 md:h-24 flex items-stretch relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    disabled: !isMine,\n    onClick: () => handleupdateGameScore(),\n    className: classnames(\"flex-1 flex align-center justify-center text-white ont-bold w-100\", {\n      \"bg-teal-700 hover:bg-teal-500\": isMine\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, score === 1 && __jsx(SVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, __jsx(\"line\", {\n    x1: \"15\",\n    y1: \"9\",\n    x2: \"9\",\n    y2: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  })), score === 2 && __jsx(SVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, __jsx(\"line\", {\n    x1: \"15\",\n    y1: \"9\",\n    x2: \"9\",\n    y2: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }), __jsx(\"line\", {\n    x1: \"9\",\n    y1: \"9\",\n    x2: \"15\",\n    y2: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  })), score > 2 && __jsx(SVG, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, __jsx(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }), __jsx(\"line\", {\n    x1: \"15\",\n    y1: \"9\",\n    x2: \"9\",\n    y2: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }), __jsx(\"line\", {\n    x1: \"9\",\n    y1: \"9\",\n    x2: \"15\",\n    y2: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }))));\n}\n\nfunction SVG(props) {\n  return __jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    width: 48,\n    height: 48,\n    fill: \"none\",\n    stroke: \"white\",\n    strokeWidth: \"1\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 5\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["/Users/sean/Workspace/darts/component/game.tsx"],"names":["React","classnames","useGetUserID","updateGameScore","resetScore","Game","props","join_id","players","id","gameID","creator_id","score_events","scoreEvents","userID","score","reduce","scoreObject","player","total","forEach","scoreEvent","user_id","hit_value","hitValue","usersScoreForHitValue","playersScoreForHitValue","highestScore","lowestScore","Object","values","acc","currentHighest","currentLowest","newHighest","newLowest","Infinity","creator","find","hasWinner","winnerName","keys","scoreForUserID","isHighest","name","ScoreBoard","map","value","index","userIDForScore","userScore","isMine","number","ScoreRow","playerID","handleupdateGameScore","SVG","children"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport { useGetUserID } from \"../effects/user\";\nimport { updateGameScore, resetScore, newGame } from \"../api/firebase\";\n\n// 2 person, closed + highest score\n// 3 person, closed + lowest score\n\nexport default function Game(props) {\n  const {\n    join_id,\n    players,\n    id: gameID,\n    creator_id,\n    score_events: scoreEvents = []\n  } = props;\n  const userID = useGetUserID();\n\n  // Initialize score object based on how many players there are\n  let score: Score = players.reduce((scoreObject, player) => {\n    return {\n      ...scoreObject,\n      [player.id]: {\n        20: 0,\n        19: 0,\n        15: 0,\n        18: 0,\n        17: 0,\n        16: 0,\n        25: 0,\n        total: 0\n      }\n    };\n  }, {});\n\n  // For each `score_event`, update the score for everyone\n  scoreEvents.forEach((scoreEvent: ScoreEvent) => {\n    const { user_id: userID, hit_value: hitValue } = scoreEvent;\n\n    const usersScoreForHitValue = score[userID][hitValue];\n    if (usersScoreForHitValue < 3) {\n      score[userID][hitValue] += 1;\n    } else {\n      // Add score to other players that don't have hitValue closed out\n      players.forEach((player: Player) => {\n        const playersScoreForHitValue = score[player.id][hitValue];\n        if (playersScoreForHitValue < 3) {\n          score[player.id].total += hitValue;\n        }\n      });\n    }\n  });\n\n  const [highestScore, lowestScore] = Object.values(score).reduce(\n    (acc: [number, number], score: Score) => {\n      const [currentHighest, currentLowest] = acc;\n      let newHighest: number;\n      let newLowest: number;\n\n      if (score.total > currentHighest) {\n        newHighest = score.total;\n      }\n\n      if (score.total < currentLowest) {\n        newLowest = score.total;\n      }\n\n      return [newHighest || currentHighest, newLowest || currentLowest];\n    },\n    [0, Infinity]\n  );\n\n  const creator = players.find(player => player.id === creator_id);\n\n  let hasWinner = false;\n  let winnerName;\n  Object.keys(score).forEach(userID => {\n    const scoreForUserID = score[userID];\n\n    if (scoreForUserID >= 21) {\n      // Does player have the highest score?\n      const isHighest = score.total === highestScore;\n\n      if (isHighest) {\n        hasWinner = true;\n        winnerName = player.name;\n      }\n    }\n  });\n\n  //   <div className=\"mx-auto\">\n  //     <img src=\"/winner.png\" className=\"w-full max-w-md md:mt-8 px-8\" />\n  //     <h1 className=\"chalk text-6xl px-8\">Nice one {winnerName}!</h1>\n\n  //     <div className=\"px-8\">\n  //       {creator && creator.id === userID ? (\n  //         <button\n  //           className=\"mt-4 md:mt-24 w-full md:w-auto text-2xl bg-teal-500 hover:bg-teal-700 text-white py-2 px-4 rounded-lg shadow\"\n  //           onClick={() => newGame(gameID)}\n  //         >\n  //           New Game\n  //         </button>\n  //       ) : (\n  //         <div className=\"text-sm my-16\">\n  //           Waiting for the host to start the another game...\n  //         </div>\n  //       )}\n  //     </div>\n  //   </div>\n  // )\n  return (\n    <div className=\"flex-col overflow-x-scroll\">\n      <ScoreBoard score={score} gameID={gameID} players={players} />\n      <button\n        className=\"mt-24 mb-4 md:w-auto text-2xl bg-gray-800 hover:bg-teal-700 text-white py-2 px-4 text-xs rounded-lg shadow\"\n        onClick={() => resetScore(gameID, userID)}\n      >\n        Reset Score\n      </button>\n    </div>\n  );\n}\n\nfunction ScoreBoard(props) {\n  const { players, gameID, score } = props;\n  const userID = useGetUserID();\n\n  return (\n    <div className=\"mt-4 md:mt-8 text-sm md:text-2xl bg-teal-800 rounded-lg chalk\">\n      <div className=\"text-white\">\n        <div className=\"flex\">\n          <div className=\"score__column flex flex-col justify-center align-center\">\n            {[\"\", 20, 19, 18, 17, 16, 15, 25].map((value, index) => {\n              return (\n                <div\n                  key={value}\n                  className={`score__item h-16 ${\n                    index === 0 ? \"h-24\" : \"\"\n                  } md:h-24 px-4 flex items-center justify-center`}\n                >\n                  <span>{value}</span>\n                </div>\n              );\n            })}\n          </div>\n          {Object.keys(score).map(userIDForScore => {\n            const player = players.find(player => player.id === userIDForScore);\n            const userScore = score[userIDForScore];\n            const isMine = userIDForScore === userID;\n            return (\n              <div key={userIDForScore} className=\"score__column\">\n                <div\n                  className={classnames(\n                    \"score__item h-24 md:h-24 w-24 text-center pt-2 \",\n                    {\n                      \"bg-teal-700\": isMine\n                    }\n                  )}\n                >\n                  <div className=\"text-lg md:text-md text-gray-300\">\n                    {player.name}\n                  </div>\n                  <div className=\"text-4xl\">{userScore.total}</div>\n                </div>\n                {[20, 19, 18, 17, 16, 15, 25].map(number => {\n                  return (\n                    <ScoreRow\n                      key={number}\n                      number={number}\n                      score={score[userIDForScore][number]}\n                      playerID={userIDForScore}\n                      gameID={gameID}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ScoreRow(props) {\n  const { number, score, gameID, playerID } = props;\n  const userID = useGetUserID();\n  const isMine = playerID === userID;\n\n  function handleupdateGameScore() {\n    updateGameScore(gameID, userID, number);\n  }\n\n  return (\n    <div className=\"score__item h-16 md:h-24 flex items-stretch relative\">\n      <button\n        disabled={!isMine}\n        onClick={() => handleupdateGameScore()}\n        className={classnames(\n          \"flex-1 flex align-center justify-center text-white ont-bold w-100\",\n          {\n            \"bg-teal-700 hover:bg-teal-500\": isMine\n          }\n        )}\n      >\n        {score === 1 && (\n          <SVG>\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n          </SVG>\n        )}\n        {score === 2 && (\n          <SVG>\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\n          </SVG>\n        )}\n        {score > 2 && (\n          <SVG>\n            <circle cx=\"12\" cy=\"12\" r=\"10\" />\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\n          </SVG>\n        )}\n      </button>\n    </div>\n  );\n}\n\nfunction SVG(props) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={48}\n      height={48}\n      fill=\"none\"\n      stroke=\"white\"\n      strokeWidth=\"1\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      {props.children}\n    </svg>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}