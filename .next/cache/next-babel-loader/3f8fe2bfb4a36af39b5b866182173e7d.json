{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport { useGetUserID } from \"../effects/user\";\nimport { updateScore, resetScore, newGame } from \"../api/firebase\"; // 2 person, closed + highest score\n// 3 person, closed + lowest score\n\nexport default function Game(props) {\n  var join_id = props.join_id,\n      players = props.players,\n      gameID = props.id,\n      creator_id = props.creator_id;\n  var userID = useGetUserID();\n  var highestScore = players.reduce(function (acc, player) {\n    if (player.score.total > acc) {\n      return player.score.total;\n    } else {\n      return acc;\n    }\n  }, 0);\n  var lowestScore = players.reduce(function (acc, player) {\n    if (player.score.total < acc) {\n      return player.score.total;\n    } else {\n      return acc;\n    }\n  }, Infinity);\n  var creator = players.find(function (player) {\n    return player.id === creator_id;\n  });\n  var hasWinner = false;\n  var winnerName;\n\n  for (var i = 0; i < players.length; i++) {\n    var player = players[i];\n    var scores = player.score;\n    var total = scores[15] + scores[16] + scores[17] + scores[18] + scores[19] + scores[20] + scores[\"bull\"];\n\n    if (total === 21) {\n      if (players.length > 2) {\n        // Does player have the lowest score?\n        var isLowest = players.some(function (player) {\n          return player.score.total === lowestScore;\n        });\n\n        if (isLowest) {\n          hasWinner = true;\n          winnerName = player.name;\n        }\n      } else {\n        // Does player have the highest score?\n        var isHighest = players.some(function (player) {\n          return player.score.total === highestScore;\n        });\n\n        if (isHighest) {\n          hasWinner = true;\n          winnerName = player.name;\n        }\n      }\n    }\n  }\n\n  return hasWinner ? __jsx(\"div\", {\n    className: \"mx-auto\"\n  }, __jsx(\"img\", {\n    src: \"/winner.png\",\n    className: \"w-full max-w-md md:mt-8 px-8\"\n  }), __jsx(\"h1\", {\n    className: \"chalk text-6xl px-8\"\n  }, \"Nice one \", winnerName, \"!\"), __jsx(\"div\", {\n    className: \"px-8\"\n  }, creator && creator.id === userID ? __jsx(\"button\", {\n    className: \"mt-4 md:mt-24 w-full md:w-auto text-2xl bg-teal-500 hover:bg-teal-700 text-white py-2 px-4 rounded-lg shadow\",\n    onClick: function onClick() {\n      return newGame(gameID);\n    }\n  }, \"New Game\") : __jsx(\"div\", {\n    className: \"text-sm my-16\"\n  }, \"Waiting for the host to start the another game...\"))) : __jsx(\"div\", {\n    className: \"flex-col overflow-x-scroll\"\n  }, __jsx(ScoreBoard, {\n    players: players,\n    gameID: gameID\n  }), __jsx(\"button\", {\n    className: \"mt-24 mb-4 md:w-auto text-2xl bg-gray-800 hover:bg-teal-700 text-white py-2 px-4 text-xs rounded-lg shadow\",\n    onClick: function onClick() {\n      return resetScore(gameID, userID);\n    }\n  }, \"Reset Score\"));\n}\n\nfunction ScoreBoard(props) {\n  var players = props.players,\n      gameID = props.gameID;\n  var userID = useGetUserID();\n  return __jsx(\"div\", {\n    className: \"mt-4 md:mt-8 text-sm md:text-2xl bg-teal-800 rounded-lg chalk\"\n  }, __jsx(\"div\", {\n    className: \"text-white\"\n  }, __jsx(\"div\", {\n    className: \"flex\"\n  }, __jsx(\"div\", {\n    className: \"score__column flex flex-col justify-center align-center\"\n  }, [\"\", 20, 19, 18, 17, 16, 15, \"bull\"].map(function (value, index) {\n    return __jsx(\"div\", {\n      key: value,\n      className: \"score__item h-16 \".concat(index === 0 ? \"h-24\" : \"\", \" md:h-24 px-4 flex items-center justify-center\")\n    }, __jsx(\"span\", null, value));\n  })), players.map(function (_ref) {\n    var id = _ref.id,\n        name = _ref.name,\n        score = _ref.score;\n    var isMine = id === userID;\n    return __jsx(\"div\", {\n      key: id,\n      className: \"score__column\"\n    }, __jsx(\"div\", {\n      className: classnames(\"score__item h-24 md:h-24 w-24 text-center pt-2 \", {\n        \"bg-teal-700\": isMine\n      })\n    }, __jsx(\"div\", {\n      className: \"text-lg md:text-md text-gray-300\"\n    }, name), __jsx(\"div\", {\n      className: \"text-4xl\"\n    }, score.total)), [20, 19, 18, 17, 16, 15, \"bull\"].map(function (number) {\n      return __jsx(ScoreRow, {\n        key: number,\n        number: number,\n        score: score[number],\n        playerID: id,\n        gameID: gameID\n      });\n    }));\n  }))));\n}\n\nfunction ScoreRow(props) {\n  var number = props.number,\n      score = props.score,\n      gameID = props.gameID,\n      playerID = props.playerID;\n  var userID = useGetUserID();\n  var isMine = playerID === userID;\n\n  function handleUpdateScore() {\n    updateScore(gameID, userID, number);\n  }\n\n  return __jsx(\"div\", {\n    className: \"score__item h-16 md:h-24 flex items-stretch relative\"\n  }, __jsx(\"button\", {\n    disabled: !isMine,\n    onClick: function onClick() {\n      return handleUpdateScore();\n    },\n    className: classnames(\"flex-1 flex align-center justify-center text-white ont-bold w-100\", {\n      \"bg-teal-700 hover:bg-teal-500\": isMine\n    })\n  }, score === 1 && __jsx(SVG, null, __jsx(\"line\", {\n    x1: \"15\",\n    y1: \"9\",\n    x2: \"9\",\n    y2: \"15\"\n  })), score === 2 && __jsx(SVG, null, __jsx(\"line\", {\n    x1: \"15\",\n    y1: \"9\",\n    x2: \"9\",\n    y2: \"15\"\n  }), __jsx(\"line\", {\n    x1: \"9\",\n    y1: \"9\",\n    x2: \"15\",\n    y2: \"15\"\n  })), score === 3 && __jsx(SVG, null, __jsx(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), __jsx(\"line\", {\n    x1: \"15\",\n    y1: \"9\",\n    x2: \"9\",\n    y2: \"15\"\n  }), __jsx(\"line\", {\n    x1: \"9\",\n    y1: \"9\",\n    x2: \"15\",\n    y2: \"15\"\n  }))));\n}\n\nfunction SVG(props) {\n  return __jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    width: 48,\n    height: 48,\n    fill: \"none\",\n    stroke: \"white\",\n    strokeWidth: \"1\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, props.children);\n}","map":null,"metadata":{},"sourceType":"module"}