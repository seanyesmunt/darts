{"version":3,"file":"static/webpack/static/development/pages/_app.js.eda8b0d77cc4b64d4573.hot-update.js","sources":["webpack:///./api/firebase.ts"],"sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nfirebase.database();\n\n// DB types\ndeclare global {\n  interface User {\n    id: string;\n    created_at: number;\n  }\n\n  interface Player {\n    id: string;\n  }\n\n  interface Game {\n    id: string;\n    creator_id: string;\n    join_id: string;\n    players: Array<Player>;\n  }\n\n  interface Error {\n    message: string;\n  }\n}\n\nexport function getUser(userID: string): Promise<User> {\n  return firebase\n    .database()\n    .ref(\"/users/\" + userID)\n    .once(\"value\")\n    .then(function(snapshot) {\n      const user = snapshot.val();\n      if (user) {\n        return { ...user, id: userID };\n      }\n\n      return createUser(userID);\n    });\n}\n\nfunction createUser(userID): Promise<User> {\n  const user = {\n    created_at: Date.now()\n  };\n\n  return new Promise((resolve, reject) => {\n    firebase\n      .database()\n      .ref(\"users/\" + userID)\n      .set(user, error => {\n        if (error) {\n          reject(error);\n        }\n\n        resolve({ ...user, id: userID });\n      });\n  });\n}\n\nexport function getGame(\n  gameID: string,\n  userID: string,\n  onUpdate: any\n): Promise<Game> {\n  return firebase\n    .database()\n    .ref(\"/games/\" + gameID)\n    .on(\"value\")\n    .then(function(snapshot) {\n      const game = snapshot.val();\n      if (game) {\n        return { ...game, id: gameID };\n      }\n\n      return createGame(gameID, userID);\n    });\n}\n\nexport function getGameId(join_id: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    firebase\n      .database()\n      .ref(\"games\")\n      .orderByChild(\"join_id\")\n      .equalTo(join_id)\n      .on(\"value\", function(snapshot) {\n        snapshot.forEach(function(data) {\n          const id = data.key;\n          if (!id) {\n            reject(\"Game not found.\");\n          } else {\n            resolve(id);\n          }\n        });\n      });\n  });\n}\n\nfunction createGame(gameID, userId): Promise<Game> {\n  const game = {\n    creator_id: userId,\n    join_id: gameID.slice(0, 4),\n    players: [\n      {\n        id: userId\n      }\n    ]\n  };\n\n  return new Promise((resolve, reject) => {\n    firebase\n      .database()\n      .ref(\"games/\" + gameID)\n      .set(game, error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve({ ...game, id: gameID });\n        }\n      });\n  });\n}\n\n// const data = {\n//   games: {\n//     \"one\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"7yzh\"\n//     },\n//     \"two\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"8n0a\"\n//     }\n//   }\n\n// }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAJA;AAUA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}