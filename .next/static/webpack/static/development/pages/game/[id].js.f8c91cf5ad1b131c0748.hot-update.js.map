{"version":3,"file":"static/webpack/static/development/pages/game/[id].js.f8c91cf5ad1b131c0748.hot-update.js","sources":["webpack:///./api/firebase.ts","webpack:///./component/game.tsx"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// DB types\ndeclare global {\n  interface User {\n    id: string;\n    created_at: number;\n  }\n\n  interface Options {\n    name: string;\n  }\n\n  interface Player {\n    id: string;\n    name: string;\n    score: {\n      15: number;\n      16: number;\n      17: number;\n      18: number;\n      19: number;\n      20: number;\n      bull: number;\n    };\n  }\n\n  interface Game {\n    id: string;\n    creator_id: string;\n    join_id: string;\n    players: Array<Player>;\n  }\n\n  interface Error {\n    message: string;\n  }\n}\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst db = firebase.database();\n\nconst DEFAULT_SCORE = {\n  15: 0,\n  16: 0,\n  17: 0,\n  18: 0,\n  19: 0,\n  20: 0,\n  bull: 0\n};\n\nexport function getUser(userID: string): Promise<User> {\n  return db\n    .ref(\"/users/\" + userID)\n    .once(\"value\")\n    .then(function(snapshot) {\n      const user = snapshot.val();\n      if (user) {\n        return { ...user, id: userID };\n      }\n\n      return createUser(userID);\n    });\n}\n\nfunction createUser(userID): Promise<User> {\n  const user = {\n    created_at: Date.now()\n  };\n\n  return new Promise((resolve, reject) => {\n    db.ref(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve({ ...user, id: userID });\n    });\n  });\n}\n\nexport function getGame(\n  gameID: string,\n  userID: string,\n  onUpdate: any\n): Promise<Game> {\n  return new Promise((resolve, reject) => {\n    db.ref(\"/games/\" + gameID).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\n\nexport function getGameId(join_id: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games\")\n      .orderByChild(\"join_id\")\n      .equalTo(join_id)\n      .on(\"value\", function(snapshot) {\n        snapshot.forEach(function(data) {\n          const id = data.key;\n          if (!id) {\n            reject(\"Game not found.\");\n          } else {\n            resolve(id);\n          }\n        });\n      });\n  });\n}\n\nexport function createGame(userID, name): Promise<Game> {\n  const gameID = uuidv4();\n\n  const game = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    players: [\n      {\n        id: userID,\n        name,\n        score: DEFAULT_SCORE\n      }\n    ]\n  };\n\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve({ ...game, id: gameID });\n      }\n    });\n  });\n}\n\nexport function addPlayerToGame(gameID, userID, name) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        if (!game.players.some(player => player.id === userID)) {\n          const newGame = {\n            ...game,\n            players: game.players.concat({\n              id: userID,\n              name,\n              score: DEFAULT_SCORE\n            })\n          };\n\n          db.ref(\"games/\" + gameID).update(newGame, error => {\n            if (error) {\n              console.error(\"error\", error);\n            }\n          });\n        }\n      });\n  });\n}\n\nexport function updateScore(gameID, userID, newScore) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        if (!game.players.some(player => player.id === userID)) {\n          const newGame = {\n            ...game,\n            players: game.players.concat({\n              id: userID,\n              name,\n              score: DEFAULT_SCORE\n            })\n          };\n\n          db.ref(\"games/\" + gameID).update(newGame, error => {\n            if (error) {\n              console.error(\"error\", error);\n            }\n          });\n        }\n      });\n  });\n}\n\n// const data = {\n//   games: {\n//     \"one\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"7yzh\"\n//     },\n//     \"two\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"8n0a\"\n//     }\n//   }\n\n// }\n","import React from \"react\";\nimport { useGetUserID } from \"../effects/user\";\nimport { updateScore } from \"../api/firebase\";\n\nfunction ScoreRow(props) {\n  const { score, gameID, playerID } = props;\n  const userID = useGetUserID();\n  const isMine = playerID === userID;\n\n  function handleUpdateScore(newScore) {\n    updateScore(gameID, userID, newScore);\n  }\n\n  return (\n    <div className=\"score__item p-5\">\n      <span className=\"mr-10\">{score || 0}</span>\n      {isMine ? (\n        <div className=\"inline-flex\">\n          <button\n            onClick={() => handleUpdateScore(score - 1)}\n            className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-l\"\n          >\n            +\n          </button>\n          <button\n            onClick={() => handleUpdateScore(score + 1)}\n            className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-r\"\n          >\n            -\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default function Game(props) {\n  const { join_id, players, id: gameID } = props;\n\n  return (\n    <div className=\"pl-10\">\n      <div className=\"text-gray-600\">#{join_id}</div>\n\n      <div className=\"flex\">\n        <div className=\"score__column\">\n          {[\"\", 15, 16, 17, 18, 19, 20, \"bull\"].map(value => {\n            return <div className=\"score__item pr-10\">{value}</div>;\n          })}\n        </div>\n        {players.map(({ id, name, score }) => {\n          return (\n            <div className=\"score__column\">\n              <div className=\"score__item border-gray-200 p-5\">{name}</div>\n              {Object.keys(score).map(number => {\n                const scoreForNumber = score[number];\n                return (\n                  <ScoreRow\n                    key={number}\n                    number={number}\n                    score={scoreForNumber}\n                    playerID={id}\n                    gameID={gameID}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAJA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AC/NA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAGA;AAIA;;;;A","sourceRoot":""}