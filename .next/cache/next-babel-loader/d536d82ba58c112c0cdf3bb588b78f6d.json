{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\"; // DB types\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst db = firebase.database();\nconst DEFAULT_SCORE = {\n  20: 0,\n  19: 0,\n  18: 0,\n  17: 0,\n  16: 0,\n  15: 0,\n  bull: 0,\n  total: 0\n};\nexport function getUser(userID) {\n  return db.ref(\"/users/\" + userID).once(\"value\").then(function (snapshot) {\n    const user = snapshot.val();\n\n    if (user) {\n      return _objectSpread({}, user, {\n        id: userID\n      });\n    }\n\n    return createUser(userID);\n  });\n}\n\nfunction createUser(userID) {\n  const user = {\n    created_at: Date.now()\n  };\n  return new Promise((resolve, reject) => {\n    db.ref(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve(_objectSpread({}, user, {\n        id: userID\n      }));\n    });\n  });\n}\n\nexport function getGame(gameID, userID, onUpdate) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"/games/\" + gameID).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\nexport function getGameId(join_id) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games\").orderByChild(\"join_id\").equalTo(join_id).on(\"value\", function (snapshot) {\n      snapshot.forEach(function (data) {\n        const id = data.key;\n\n        if (!id) {\n          reject(\"Game not found.\");\n        } else {\n          resolve(id);\n        }\n      });\n    });\n  });\n}\nexport function createGame(userID, name) {\n  const gameID = uuidv4();\n  const game = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    players: [{\n      id: userID,\n      name,\n      score: DEFAULT_SCORE\n    }]\n  };\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(_objectSpread({}, game, {\n          id: gameID\n        }));\n      }\n    });\n  });\n}\nexport function addPlayerToGame(gameID, userID, name) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).once(\"value\").then(snapshot => {\n      const game = snapshot.val();\n\n      if (!game.players.some(player => player.id === userID)) {\n        const newGame = _objectSpread({}, game, {\n          players: game.players.concat({\n            id: userID,\n            name,\n            score: DEFAULT_SCORE\n          })\n        });\n\n        db.ref(\"games/\" + gameID).update(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      }\n    });\n  });\n}\nexport function updateScore(gameID, userID, number) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).once(\"value\").then(snapshot => {\n      const game = snapshot.val();\n\n      const newGame = _objectSpread({}, game);\n\n      newGame.players = newGame.players.length > 2 ? handleThreePlayerGame(userID, newGame.players, number) : handleTwoPlayerGame(userID, newGame.players, number);\n      db.ref(\"games/\" + gameID).set(newGame, error => {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n  });\n}\nexport function resetScore(gameID, userID) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).once(\"value\").then(snapshot => {\n      const game = snapshot.val();\n\n      const newGame = _objectSpread({}, game);\n\n      newGame.players = newGame.players.map(player => {\n        if (player.id !== userID) {\n          return player;\n        }\n\n        return _objectSpread({}, player, {\n          score: DEFAULT_SCORE\n        });\n      });\n      db.ref(\"games/\" + gameID).set(newGame, error => {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n  });\n}\nexport function newGame(gameID) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).once(\"value\").then(snapshot => {\n      const game = snapshot.val();\n\n      const newGame = _objectSpread({}, game);\n\n      newGame.players = newGame.players.map(player => {\n        return _objectSpread({}, player, {\n          score: DEFAULT_SCORE\n        });\n      });\n      db.ref(\"games/\" + gameID).set(newGame, error => {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n  });\n}\n\nfunction handleTwoPlayerGame(userID, originalPlayers, number) {\n  let newPlayers = originalPlayers.slice();\n  newPlayers = newPlayers.map(player => {\n    if (player.id !== userID) {\n      return player;\n    }\n\n    const newPlayer = _objectSpread({}, player);\n\n    const scoreForNumber = newPlayer.score[number];\n\n    if (scoreForNumber === 3) {\n      // Update other scores\n      newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n    } else {\n      newPlayer.score[number] = scoreForNumber + 1;\n    }\n\n    return _objectSpread({}, newPlayer);\n  });\n  return newPlayers;\n}\n\nfunction handleThreePlayerGame(userID, originalPlayers, number) {\n  let newPlayers = originalPlayers.slice();\n  const amAddingToOtherPlayers = newPlayers.some(player => {\n    if (player.id === userID && player.score[number] === 3) {\n      return true;\n    }\n  });\n\n  if (amAddingToOtherPlayers) {\n    newPlayers = newPlayers.map(player => {\n      const newPlayer = _objectSpread({}, player);\n\n      if (newPlayer.score[number] !== 3 && newPlayer.id !== userID) {\n        newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n      }\n\n      return _objectSpread({}, newPlayer);\n    });\n  } else {\n    newPlayers = newPlayers.map(player => {\n      if (player.id !== userID) {\n        return player;\n      }\n\n      const newPlayer = _objectSpread({}, player);\n\n      const scoreForNumber = newPlayer.score[number];\n      newPlayer.score[number] = scoreForNumber + 1;\n      return _objectSpread({}, newPlayer);\n    });\n  }\n\n  return newPlayers;\n} // const data = {\n//   games: {\n//     \"one\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"7yzh\"\n//     },\n//     \"two\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"8n0a\"\n//     }\n//   }\n// }","map":{"version":3,"sources":["/Users/sean/Workspace/darts/api/firebase.ts"],"names":["v4","uuidv4","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","db","database","DEFAULT_SCORE","bull","total","getUser","userID","ref","once","then","snapshot","user","val","id","createUser","created_at","Date","now","Promise","resolve","reject","set","error","getGame","gameID","onUpdate","on","game","getGameId","join_id","orderByChild","equalTo","forEach","data","key","createGame","name","creator_id","slice","players","score","addPlayerToGame","some","player","newGame","concat","update","console","updateScore","number","handleThreePlayerGame","handleTwoPlayerGame","resetScore","map","originalPlayers","newPlayers","newPlayer","scoreForNumber","amAddingToOtherPlayers"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\n// DB types\ndeclare global {\n  interface User {\n    id: string;\n    created_at: number;\n  }\n\n  interface Options {\n    name: string;\n  }\n\n  interface Player {\n    id: string;\n    name: string;\n    score: {\n      15: number;\n      16: number;\n      17: number;\n      18: number;\n      19: number;\n      20: number;\n      bull: number;\n      total: number; // This shouldn't exist, it should just be calculated from the other values, but that's more work\n    };\n  }\n\n  interface Game {\n    id: string;\n    creator_id: string;\n    join_id: string;\n    players: Array<Player>;\n  }\n\n  interface Error {\n    message: string;\n  }\n}\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst db = firebase.database();\n\nconst DEFAULT_SCORE = {\n  20: 0,\n  19: 0,\n  18: 0,\n  17: 0,\n  16: 0,\n  15: 0,\n  bull: 0,\n  total: 0\n};\n\nexport function getUser(userID: string): Promise<User> {\n  return db\n    .ref(\"/users/\" + userID)\n    .once(\"value\")\n    .then(function(snapshot) {\n      const user = snapshot.val();\n      if (user) {\n        return { ...user, id: userID };\n      }\n\n      return createUser(userID);\n    });\n}\n\nfunction createUser(userID): Promise<User> {\n  const user = {\n    created_at: Date.now()\n  };\n\n  return new Promise((resolve, reject) => {\n    db.ref(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve({ ...user, id: userID });\n    });\n  });\n}\n\nexport function getGame(\n  gameID: string,\n  userID: string,\n  onUpdate: any\n): Promise<Game> {\n  return new Promise((resolve, reject) => {\n    db.ref(\"/games/\" + gameID).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\n\nexport function getGameId(join_id: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games\")\n      .orderByChild(\"join_id\")\n      .equalTo(join_id)\n      .on(\"value\", function(snapshot) {\n        snapshot.forEach(function(data) {\n          const id = data.key;\n          if (!id) {\n            reject(\"Game not found.\");\n          } else {\n            resolve(id);\n          }\n        });\n      });\n  });\n}\n\nexport function createGame(userID, name): Promise<Game> {\n  const gameID = uuidv4();\n\n  const game = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    players: [\n      {\n        id: userID,\n        name,\n        score: DEFAULT_SCORE\n      }\n    ]\n  };\n\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve({ ...game, id: gameID });\n      }\n    });\n  });\n}\n\nexport function addPlayerToGame(gameID, userID, name) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        if (!game.players.some(player => player.id === userID)) {\n          const newGame = {\n            ...game,\n            players: game.players.concat({\n              id: userID,\n              name,\n              score: DEFAULT_SCORE\n            })\n          };\n\n          db.ref(\"games/\" + gameID).update(newGame, error => {\n            if (error) {\n              console.error(\"error\", error);\n            }\n          });\n        }\n      });\n  });\n}\n\nexport function updateScore(gameID, userID, number) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        const newGame = { ...game };\n        newGame.players =\n          newGame.players.length > 2\n            ? handleThreePlayerGame(userID, newGame.players, number)\n            : handleTwoPlayerGame(userID, newGame.players, number);\n\n        db.ref(\"games/\" + gameID).set(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      });\n  });\n}\n\nexport function resetScore(gameID, userID) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        const newGame = { ...game };\n        newGame.players = newGame.players.map(player => {\n          if (player.id !== userID) {\n            return player;\n          }\n\n          return { ...player, score: DEFAULT_SCORE };\n        });\n\n        db.ref(\"games/\" + gameID).set(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      });\n  });\n}\n\nexport function newGame(gameID) {\n  return new Promise((resolve, reject) => {\n    db.ref(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n\n        const newGame = { ...game };\n        newGame.players = newGame.players.map(player => {\n          return { ...player, score: DEFAULT_SCORE };\n        });\n\n        db.ref(\"games/\" + gameID).set(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      });\n  });\n}\n\nfunction handleTwoPlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  let newPlayers = originalPlayers.slice();\n\n  newPlayers = newPlayers.map(player => {\n    if (player.id !== userID) {\n      return player;\n    }\n\n    const newPlayer = { ...player };\n    const scoreForNumber = newPlayer.score[number];\n    if (scoreForNumber === 3) {\n      // Update other scores\n      newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n    } else {\n      newPlayer.score[number] = scoreForNumber + 1;\n    }\n\n    return { ...newPlayer };\n  });\n\n  return newPlayers;\n}\n\nfunction handleThreePlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  let newPlayers = originalPlayers.slice();\n  const amAddingToOtherPlayers = newPlayers.some(player => {\n    if (player.id === userID && player.score[number] === 3) {\n      return true;\n    }\n  });\n\n  if (amAddingToOtherPlayers) {\n    newPlayers = newPlayers.map(player => {\n      const newPlayer = { ...player };\n      if (newPlayer.score[number] !== 3 && newPlayer.id !== userID) {\n        newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n      }\n      return { ...newPlayer };\n    });\n  } else {\n    newPlayers = newPlayers.map(player => {\n      if (player.id !== userID) {\n        return player;\n      }\n\n      const newPlayer = { ...player };\n      const scoreForNumber = newPlayer.score[number];\n      newPlayer.score[number] = scoreForNumber + 1;\n\n      return { ...newPlayer };\n    });\n  }\n\n  return newPlayers;\n}\n\n// const data = {\n//   games: {\n//     \"one\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"7yzh\"\n//     },\n//     \"two\": {\n//       creator: \"user_id\",\n//       timestamp: 000,\n//       code: \"8n0a\"\n//     }\n//   }\n\n// }\n"]},"metadata":{},"sourceType":"module"}