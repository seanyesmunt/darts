{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\nvar config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nvar database = firebase.database();\n\nfunction db(ref) {\n  return database.ref(\"/v1/\".concat(ref));\n} //\n//\n// User\n//\n//\n\n\nfunction createUser(userID) {\n  var user = {\n    created_at: Date.now()\n  };\n  return new Promise(function (resolve, reject) {\n    db(\"users/\" + userID).set(user, function (error) {\n      if (error) {\n        reject(error);\n      }\n\n      resolve(_objectSpread({}, user, {\n        id: userID\n      }));\n    });\n  });\n}\n\nexport function getUser(userID) {\n  return db(\"users/\".concat(userID)).once(\"value\").then(function (snapshot) {\n    var user = snapshot.val();\n\n    if (user) {\n      return _objectSpread({}, user, {\n        id: userID\n      });\n    }\n\n    return createUser(userID);\n  });\n} //\n//\n// Games\n//\n//\n\nexport function createGame(userID, name) {\n  var gameID = uuidv4();\n  var game = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    score_events: [],\n    players: [{\n      id: userID,\n      name: name\n    }]\n  };\n  return new Promise(function (resolve, reject) {\n    db(\"games/\".concat(gameID)).set(game, function (error) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(_objectSpread({}, game, {\n          id: gameID\n        }));\n      }\n    });\n  });\n}\nexport function updateGameScore(gameID, userID, hitValue) {\n  return new Promise(function (resolve, reject) {\n    db(\"games/\".concat(gameID)).once(\"value\").then(function (snapshot) {\n      var game = snapshot.val();\n\n      var newGame = _objectSpread({}, game);\n\n      if (!newGame.score_events) {\n        newGame.score_events = [];\n      }\n\n      newGame.score_events.push({\n        user_id: userID,\n        hit_value: hitValue\n      });\n      db(\"games/\" + gameID).set(newGame, function (error) {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n  });\n}\nexport function getGame(gameID, userID, onUpdate) {\n  return new Promise(function (resolve, reject) {\n    db(\"/games/\".concat(gameID)).on(\"value\", function (snapshot) {\n      var game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\nexport function getGameId(join_id) {\n  return new Promise(function (resolve, reject) {\n    db(\"games\").orderByChild(\"join_id\").equalTo(join_id).on(\"value\", function (snapshot) {\n      snapshot.forEach(function (data) {\n        var id = data.key;\n\n        if (!id) {\n          reject(\"Game not found.\");\n        } else {\n          resolve(id);\n        }\n      });\n    });\n  });\n}\nexport function addPlayerToGame(gameID, userID, name) {\n  db(\"games/\".concat(gameID)).once(\"value\").then(function (snapshot) {\n    var game = snapshot.val();\n\n    var newGame = _objectSpread({}, game, {\n      players: game.players.concat({\n        id: userID,\n        name: name\n      })\n    });\n\n    db(\"games/\" + gameID).update(newGame, function (error) {\n      if (error) {\n        console.error(\"error\", error);\n      }\n    });\n  });\n}\nexport function resetScore(gameID, userID) {// return new Promise((resolve, reject) => {\n  //   db(`games/${gameID}`)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       const newGame = { ...game };\n  //       newGame.players = newGame.players.map(player => {\n  //         if (player.id !== userID) {\n  //           return player;\n  //         }\n  //         return { ...player };\n  //       });\n  //       db(\"games/\" + gameID).set(newGame, error => {\n  //         if (error) {\n  //           console.error(\"error\", error);\n  //         }\n  //       });\n  //     });\n  // });\n}\nexport function newGame(gameID) {\n  return new Promise(function (resolve, reject) {\n    db(\"games/\" + gameID).once(\"value\").then(function (snapshot) {\n      var game = snapshot.val();\n\n      var newGame = _objectSpread({}, game);\n\n      newGame.score_events = [];\n      db(\"games/\" + gameID).set(newGame, function (error) {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n  });\n}\n\nfunction handleTwoPlayerGame(userID, originalPlayers, number) {// let newPlayers = originalPlayers.slice();\n  // newPlayers = newPlayers.map(player => {\n  //   if (player.id !== userID) {\n  //     return player;\n  //   }\n  //   const newPlayer = { ...player };\n  //   const scoreForNumber = newPlayer.score[number];\n  //   if (scoreForNumber === 3) {\n  //     // Update other scores\n  //     newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n  //   } else {\n  //     newPlayer.score[number] = scoreForNumber + 1;\n  //   }\n  //   return { ...newPlayer };\n  // });\n  // return newPlayers;\n}\n\nfunction handleThreePlayerGame(userID, originalPlayers, number) {// let newPlayers = originalPlayers.slice();\n  // const amAddingToOtherPlayers = newPlayers.some(player => {\n  //   if (player.id === userID && player.score[number] === 3) {\n  //     return true;\n  //   }\n  // });\n  // if (amAddingToOtherPlayers) {\n  //   newPlayers = newPlayers.map(player => {\n  //     const newPlayer = { ...player };\n  //     if (newPlayer.score[number] !== 3 && newPlayer.id !== userID) {\n  //       newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n  //     }\n  //     return { ...newPlayer };\n  //   });\n  // } else {\n  //   newPlayers = newPlayers.map(player => {\n  //     if (player.id !== userID) {\n  //       return player;\n  //     }\n  //     const newPlayer = { ...player };\n  //     const scoreForNumber = newPlayer.score[number];\n  //     newPlayer.score[number] = scoreForNumber + 1;\n  //     return { ...newPlayer };\n  //   });\n  // }\n  // return newPlayers;\n}","map":{"version":3,"sources":["/Users/sean/Workspace/darts/api/firebase.ts"],"names":["v4","uuidv4","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","database","db","ref","createUser","userID","user","created_at","Date","now","Promise","resolve","reject","set","error","id","getUser","once","then","snapshot","val","createGame","name","gameID","game","creator_id","join_id","slice","score_events","players","updateGameScore","hitValue","newGame","push","user_id","hit_value","console","getGame","onUpdate","on","getGameId","orderByChild","equalTo","forEach","data","key","addPlayerToGame","concat","update","resetScore","handleTwoPlayerGame","originalPlayers","number","handleThreePlayerGame"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst database = firebase.database();\n\nfunction db(ref: string) {\n  return database.ref(`/v1/${ref}`);\n}\n\n//\n//\n// User\n//\n//\nfunction createUser(userID: string): Promise<User> {\n  const user = {\n    created_at: Date.now()\n  };\n\n  return new Promise((resolve, reject) => {\n    db(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve({ ...user, id: userID });\n    });\n  });\n}\n\nexport function getUser(userID: string): Promise<User> {\n  return db(`users/${userID}`)\n    .once(\"value\")\n    .then(function(snapshot) {\n      const user = snapshot.val();\n      if (user) {\n        return { ...user, id: userID };\n      }\n\n      return createUser(userID);\n    });\n}\n\n//\n//\n// Games\n//\n//\nexport function createGame(userID: string, name: string): Promise<Game> {\n  const gameID = uuidv4();\n\n  const game: GameLessID = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    score_events: [],\n    players: [\n      {\n        id: userID,\n        name\n      }\n    ]\n  };\n\n  return new Promise((resolve, reject) => {\n    db(`games/${gameID}`).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve({ ...game, id: gameID });\n      }\n    });\n  });\n}\n\nexport function updateGameScore(\n  gameID: string,\n  userID: string,\n  hitValue: number\n) {\n  return new Promise((resolve, reject) => {\n    db(`games/${gameID}`)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n        let newGame: Game = { ...game };\n\n        if (!newGame.score_events) {\n          newGame.score_events = [];\n        }\n\n        newGame.score_events.push({\n          user_id: userID,\n          hit_value: hitValue\n        });\n        db(\"games/\" + gameID).set(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      });\n  });\n}\n\nexport function getGame(\n  gameID: string,\n  userID: string,\n  onUpdate: any\n): Promise<Game> {\n  return new Promise((resolve, reject) => {\n    db(`/games/${gameID}`).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\n\nexport function getGameId(join_id: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    db(\"games\")\n      .orderByChild(\"join_id\")\n      .equalTo(join_id)\n      .on(\"value\", function(snapshot) {\n        snapshot.forEach(function(data) {\n          const id = data.key;\n          if (!id) {\n            reject(\"Game not found.\");\n          } else {\n            resolve(id);\n          }\n        });\n      });\n  });\n}\n\nexport function addPlayerToGame(gameID, userID, name) {\n  db(`games/${gameID}`)\n    .once(\"value\")\n    .then(snapshot => {\n      const game = snapshot.val();\n      const newGame = {\n        ...game,\n        players: game.players.concat({\n          id: userID,\n          name\n        })\n      };\n      db(\"games/\" + gameID).update(newGame, error => {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n}\n\nexport function resetScore(gameID, userID) {\n  // return new Promise((resolve, reject) => {\n  //   db(`games/${gameID}`)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       const newGame = { ...game };\n  //       newGame.players = newGame.players.map(player => {\n  //         if (player.id !== userID) {\n  //           return player;\n  //         }\n  //         return { ...player };\n  //       });\n  //       db(\"games/\" + gameID).set(newGame, error => {\n  //         if (error) {\n  //           console.error(\"error\", error);\n  //         }\n  //       });\n  //     });\n  // });\n}\n\nexport function newGame(gameID) {\n  return new Promise((resolve, reject) => {\n    db(\"games/\" + gameID)\n      .once(\"value\")\n      .then(snapshot => {\n        const game = snapshot.val();\n        const newGame = { ...game };\n        newGame.score_events = [];\n\n        db(\"games/\" + gameID).set(newGame, error => {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      });\n  });\n}\n\nfunction handleTwoPlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  // let newPlayers = originalPlayers.slice();\n  // newPlayers = newPlayers.map(player => {\n  //   if (player.id !== userID) {\n  //     return player;\n  //   }\n  //   const newPlayer = { ...player };\n  //   const scoreForNumber = newPlayer.score[number];\n  //   if (scoreForNumber === 3) {\n  //     // Update other scores\n  //     newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n  //   } else {\n  //     newPlayer.score[number] = scoreForNumber + 1;\n  //   }\n  //   return { ...newPlayer };\n  // });\n  // return newPlayers;\n}\n\nfunction handleThreePlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  // let newPlayers = originalPlayers.slice();\n  // const amAddingToOtherPlayers = newPlayers.some(player => {\n  //   if (player.id === userID && player.score[number] === 3) {\n  //     return true;\n  //   }\n  // });\n  // if (amAddingToOtherPlayers) {\n  //   newPlayers = newPlayers.map(player => {\n  //     const newPlayer = { ...player };\n  //     if (newPlayer.score[number] !== 3 && newPlayer.id !== userID) {\n  //       newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n  //     }\n  //     return { ...newPlayer };\n  //   });\n  // } else {\n  //   newPlayers = newPlayers.map(player => {\n  //     if (player.id !== userID) {\n  //       return player;\n  //     }\n  //     const newPlayer = { ...player };\n  //     const scoreForNumber = newPlayer.score[number];\n  //     newPlayer.score[number] = scoreForNumber + 1;\n  //     return { ...newPlayer };\n  //   });\n  // }\n  // return newPlayers;\n}\n"]},"metadata":{},"sourceType":"module"}