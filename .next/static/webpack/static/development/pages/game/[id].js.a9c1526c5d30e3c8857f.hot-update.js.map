{"version":3,"file":"static/webpack/static/development/pages/game/[id].js.a9c1526c5d30e3c8857f.hot-update.js","sources":["webpack:///./api/firebase.ts","webpack:///./component/game.tsx"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst database = firebase.database();\n\nfunction db(ref: string) {\n  return database.ref(`/v1/${ref}`);\n}\n\n//\n//\n// User\n//\n//\nfunction createUser(userID: string): Promise<User> {\n  const user = {\n    created_at: Date.now()\n  };\n\n  return new Promise((resolve, reject) => {\n    db(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve({ ...user, id: userID });\n    });\n  });\n}\n\nexport function getUser(userID: string): Promise<User> {\n  return db(`users/${userID}`)\n    .once(\"value\")\n    .then(function(snapshot) {\n      const user = snapshot.val();\n      if (user) {\n        return { ...user, id: userID };\n      }\n\n      return createUser(userID);\n    });\n}\n\n//\n//\n// Games\n//\n//\nexport function createGame(userID, name): Promise<Game> {\n  const gameID = uuidv4();\n\n  const game: GameLessID = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    score_events: [],\n    players: [\n      {\n        id: userID,\n        name\n      }\n    ]\n  };\n\n  return new Promise((resolve, reject) => {\n    db(`games/${gameID}`).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve({ ...game, id: gameID });\n      }\n    });\n  });\n}\n\nexport function getGame(\n  gameID: string,\n  userID: string,\n  onUpdate: any\n): Promise<Game> {\n  return new Promise((resolve, reject) => {\n    db(`/games/${gameID}`).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\n\nexport function getGameId(join_id: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    db(\"games\")\n      .orderByChild(\"join_id\")\n      .equalTo(join_id)\n      .on(\"value\", function(snapshot) {\n        snapshot.forEach(function(data) {\n          const id = data.key;\n          if (!id) {\n            reject(\"Game not found.\");\n          } else {\n            resolve(id);\n          }\n        });\n      });\n  });\n}\n\nexport function addPlayerToGame(gameID, userID, name) {\n  // return new Promise((resolve, reject) => {\n  //   db(`games/${gameID}`)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       if (!game.players.some(player => player.id === userID)) {\n  //         const newGame = {\n  //           ...game,\n  //           players: game.players.concat({\n  //             id: userID,\n  //             name\n  //           })\n  //         };\n  //         db(\"games/\" + gameID).update(newGame, error => {\n  //           if (error) {\n  //             console.error(\"error\", error);\n  //           }\n  //         });\n  //       }\n  //     });\n  // });\n}\n\nexport function updateGameScore(gameID, userID, number) {\n  // return new Promise((resolve, reject) => {\n  //   db(`games/${gameID}`)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       const newGame = { ...game };\n  //       newGame.players =\n  //         newGame.players.length > 2\n  //           ? handleThreePlayerGame(userID, newGame.players, number)\n  //           : handleTwoPlayerGame(userID, newGame.players, number);\n  //       db(\"games/\" + gameID).set(newGame, error => {\n  //         if (error) {\n  //           console.error(\"error\", error);\n  //         }\n  //       });\n  //     });\n  // });\n}\n\nexport function resetScore(gameID, userID) {\n  // return new Promise((resolve, reject) => {\n  //   db(`games/${gameID}`)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       const newGame = { ...game };\n  //       newGame.players = newGame.players.map(player => {\n  //         if (player.id !== userID) {\n  //           return player;\n  //         }\n  //         return { ...player };\n  //       });\n  //       db(\"games/\" + gameID).set(newGame, error => {\n  //         if (error) {\n  //           console.error(\"error\", error);\n  //         }\n  //       });\n  //     });\n  // });\n}\n\nexport function newGame(gameID) {\n  // return new Promise((resolve, reject) => {\n  //   db(\"games/\" + gameID)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       const newGame = { ...game };\n  //       newGame.players = newGame.players.map(player => {\n  //         return { ...player };\n  //       });\n  //       db(\"games/\" + gameID).set(newGame, error => {\n  //         if (error) {\n  //           console.error(\"error\", error);\n  //         }\n  //       });\n  //     });\n  // });\n}\n\nfunction handleTwoPlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  // let newPlayers = originalPlayers.slice();\n  // newPlayers = newPlayers.map(player => {\n  //   if (player.id !== userID) {\n  //     return player;\n  //   }\n  //   const newPlayer = { ...player };\n  //   const scoreForNumber = newPlayer.score[number];\n  //   if (scoreForNumber === 3) {\n  //     // Update other scores\n  //     newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n  //   } else {\n  //     newPlayer.score[number] = scoreForNumber + 1;\n  //   }\n  //   return { ...newPlayer };\n  // });\n  // return newPlayers;\n}\n\nfunction handleThreePlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  // let newPlayers = originalPlayers.slice();\n  // const amAddingToOtherPlayers = newPlayers.some(player => {\n  //   if (player.id === userID && player.score[number] === 3) {\n  //     return true;\n  //   }\n  // });\n  // if (amAddingToOtherPlayers) {\n  //   newPlayers = newPlayers.map(player => {\n  //     const newPlayer = { ...player };\n  //     if (newPlayer.score[number] !== 3 && newPlayer.id !== userID) {\n  //       newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n  //     }\n  //     return { ...newPlayer };\n  //   });\n  // } else {\n  //   newPlayers = newPlayers.map(player => {\n  //     if (player.id !== userID) {\n  //       return player;\n  //     }\n  //     const newPlayer = { ...player };\n  //     const scoreForNumber = newPlayer.score[number];\n  //     newPlayer.score[number] = scoreForNumber + 1;\n  //     return { ...newPlayer };\n  //   });\n  // }\n  // return newPlayers;\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { useGetUserID } from \"../effects/user\";\nimport { updateGameScore, resetScore, newGame } from \"../api/firebase\";\n\n// 2 person, closed + highest score\n// 3 person, closed + lowest score\n\nexport default function Game(props) {\n  const {\n    join_id,\n    players,\n    id: gameID,\n    creator_id,\n    score_events: scoreEvents\n  } = props;\n  const userID = useGetUserID();\n  const highestScore = 0;\n\n  let score = players.reduce((scoreObject, player) => {\n    return {\n      ...scoreObject,\n      [player.id]: {\n        20: 0,\n        19: 0,\n        15: 0,\n        18: 0,\n        17: 0,\n        16: 0,\n        25: 0,\n        total: 0\n      }\n    };\n  }, {});\n\n  // const highestScore = players.reduce((acc, player) => {\n  //   if (player.score.total > acc) {\n  //     return player.score.total;\n  //   } else {\n  //     return acc;\n  //   }\n  // }, 0);\n\n  // const lowestScore = players.reduce((acc, player) => {\n  //   if (player.score.total < acc) {\n  //     return player.score.total;\n  //   } else {\n  //     return acc;\n  //   }\n  // }, Infinity);\n\n  // const creator = players.find(player => player.id === creator_id);\n\n  // let hasWinner = false;\n  // let winnerName;\n  // for (var i = 0; i < players.length; i++) {\n  //   const player = players[i];\n  //   const scores = player.score;\n  //   const total =\n  //     scores[15] +\n  //     scores[16] +\n  //     scores[17] +\n  //     scores[18] +\n  //     scores[19] +\n  //     scores[20] +\n  //     scores[\"bull\"];\n\n  //   if (total === 21) {\n  //     if (players.length > 2) {\n  //       // Does player have the lowest score?\n  //       const isLowest = players.some(player => {\n  //         return player.score.total === lowestScore;\n  //       });\n\n  //       if (isLowest) {\n  //         hasWinner = true;\n  //         winnerName = player.name;\n  //       }\n  //     } else {\n  //       // Does player have the highest score?\n  //       const isHighest = players.some(player => {\n  //         return player.score.total === highestScore;\n  //       });\n\n  //       if (isHighest) {\n  //         hasWinner = true;\n  //         winnerName = player.name;\n  //       }\n  //     }\n  //   }\n  // }\n\n  //   <div className=\"mx-auto\">\n  //     <img src=\"/winner.png\" className=\"w-full max-w-md md:mt-8 px-8\" />\n  //     <h1 className=\"chalk text-6xl px-8\">Nice one {winnerName}!</h1>\n\n  //     <div className=\"px-8\">\n  //       {creator && creator.id === userID ? (\n  //         <button\n  //           className=\"mt-4 md:mt-24 w-full md:w-auto text-2xl bg-teal-500 hover:bg-teal-700 text-white py-2 px-4 rounded-lg shadow\"\n  //           onClick={() => newGame(gameID)}\n  //         >\n  //           New Game\n  //         </button>\n  //       ) : (\n  //         <div className=\"text-sm my-16\">\n  //           Waiting for the host to start the another game...\n  //         </div>\n  //       )}\n  //     </div>\n  //   </div>\n  // )\n  return (\n    <div className=\"flex-col overflow-x-scroll\">\n      <ScoreBoard score={score} gameID={gameID} players={players} />\n      <button\n        className=\"mt-24 mb-4 md:w-auto text-2xl bg-gray-800 hover:bg-teal-700 text-white py-2 px-4 text-xs rounded-lg shadow\"\n        onClick={() => resetScore(gameID, userID)}\n      >\n        Reset Score\n      </button>\n    </div>\n  );\n}\n\nfunction ScoreBoard(props) {\n  const { players, gameID, score } = props;\n  const userID = useGetUserID();\n\n  return (\n    <div className=\"mt-4 md:mt-8 text-sm md:text-2xl bg-teal-800 rounded-lg chalk\">\n      <div className=\"text-white\">\n        <div className=\"flex\">\n          <div className=\"score__column flex flex-col justify-center align-center\">\n            {[\"\", 20, 19, 18, 17, 16, 15, 25].map((value, index) => {\n              return (\n                <div\n                  key={value}\n                  className={`score__item h-16 ${\n                    index === 0 ? \"h-24\" : \"\"\n                  } md:h-24 px-4 flex items-center justify-center`}\n                >\n                  <span>{value}</span>\n                </div>\n              );\n            })}\n          </div>\n          {Object.keys(score).map(userIDForScore => {\n            const player = players.find(player => player.id === userIDForScore);\n            const userScore = score[userIDForScore];\n            const isMine = userIDForScore === userID;\n            return (\n              <div key={userIDForScore} className=\"score__column\">\n                <div\n                  className={classnames(\n                    \"score__item h-24 md:h-24 w-24 text-center pt-2 \",\n                    {\n                      \"bg-teal-700\": isMine\n                    }\n                  )}\n                >\n                  <div className=\"text-lg md:text-md text-gray-300\">\n                    {player.name}\n                  </div>\n                  <div className=\"text-4xl\">{userScore.total}</div>\n                </div>\n                {[20, 19, 18, 17, 16, 15, 25].map(number => {\n                  return (\n                    <ScoreRow\n                      key={number}\n                      number={number}\n                      score={score[userIDForScore][number]}\n                      playerID={userIDForScore}\n                      gameID={gameID}\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ScoreRow(props) {\n  const { number, score, gameID, playerID } = props;\n  const userID = useGetUserID();\n  const isMine = playerID === userID;\n\n  function handleupdateGameScore() {\n    updateGameScore(gameID, userID, number);\n  }\n\n  return (\n    <div className=\"score__item h-16 md:h-24 flex items-stretch relative\">\n      <button\n        disabled={!isMine}\n        onClick={() => handleupdateGameScore()}\n        className={classnames(\n          \"flex-1 flex align-center justify-center text-white ont-bold w-100\",\n          {\n            \"bg-teal-700 hover:bg-teal-500\": isMine\n          }\n        )}\n      >\n        {score === 1 && (\n          <SVG>\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n          </SVG>\n        )}\n        {score === 2 && (\n          <SVG>\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\n          </SVG>\n        )}\n        {score === 3 && (\n          <SVG>\n            <circle cx=\"12\" cy=\"12\" r=\"10\" />\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\n          </SVG>\n        )}\n      </button>\n    </div>\n  );\n}\n\nfunction SVG(props) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      width={48}\n      height={48}\n      fill=\"none\"\n      stroke=\"white\"\n      strokeWidth=\"1\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      {props.children}\n    </svg>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AALA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpQA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAGA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AADA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;;A","sourceRoot":""}