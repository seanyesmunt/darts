{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { getGame } from \"../api/firebase\";\nimport { useGetUserID } from \"./user\";\nconst GAME_ID = \"game_id\";\nexport function useGetGame(gameID) {\n  const userID = useGetUserID();\n  const [game, setGame] = React.useState();\n  const [error, setError] = React.useState();\n  React.useEffect(() => {\n    function onUpdate(value) {\n      setGame(_objectSpread({}, value, {\n        id: gameID\n      }));\n    }\n\n    if (gameID && userID) {\n      getGame(gameID, userID, onUpdate);\n    }\n  }, [gameID, userID]);\n  return [game, error];\n}\nexport function useGetGameID() {\n  const [game] = useGetGame(undefined);\n  const gameID = game && game.id;\n  return gameID;\n}","map":null,"metadata":{},"sourceType":"module"}