{"version":3,"file":"static/webpack/static/development/pages/new.js.8dd2235ea3407bdc0c71.hot-update.js","sources":["webpack:///./api/firebase.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst database = firebase.database();\n\nfunction db(ref: string) {\n  return database.ref(`/v1/${ref}`);\n}\n\n//\n//\n// User\n//\n//\nfunction createUser(userID: string): Promise<User> {\n  const user = {\n    created_at: Date.now()\n  };\n\n  return new Promise((resolve, reject) => {\n    db(\"users/\" + userID).set(user, error => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve({ ...user, id: userID });\n    });\n  });\n}\n\nexport function getUser(userID: string): Promise<User> {\n  return db(`users/${userID}`)\n    .once(\"value\")\n    .then(function(snapshot) {\n      const user = snapshot.val();\n      if (user) {\n        return { ...user, id: userID };\n      }\n\n      return createUser(userID);\n    });\n}\n\n//\n//\n// Games\n//\n//\nexport function createGame(userID, name): Promise<Game> {\n  const gameID = uuidv4();\n\n  const game: GameLessID = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    score_events: [],\n    players: [\n      {\n        id: userID,\n        name\n      }\n    ]\n  };\n\n  return new Promise((resolve, reject) => {\n    db(`games/${gameID}`).set(game, error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve({ ...game, id: gameID });\n      }\n    });\n  });\n}\n\nexport function getGame(\n  gameID: string,\n  userID: string,\n  onUpdate: any\n): Promise<Game> {\n  return new Promise((resolve, reject) => {\n    db(`/games/${gameID}`).on(\"value\", snapshot => {\n      const game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\n\nexport function getGameId(join_id: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    db(\"games\")\n      .orderByChild(\"join_id\")\n      .equalTo(join_id)\n      .on(\"value\", function(snapshot) {\n        snapshot.forEach(function(data) {\n          const id = data.key;\n          if (!id) {\n            reject(\"Game not found.\");\n          } else {\n            resolve(id);\n          }\n        });\n      });\n  });\n}\n\nexport function addPlayerToGame(gameID, userID, name) {\n  // return new Promise((resolve, reject) => {\n  //   db(`games/${gameID}`)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       if (!game.players.some(player => player.id === userID)) {\n  //         const newGame = {\n  //           ...game,\n  //           players: game.players.concat({\n  //             id: userID,\n  //             name\n  //           })\n  //         };\n  //         db(\"games/\" + gameID).update(newGame, error => {\n  //           if (error) {\n  //             console.error(\"error\", error);\n  //           }\n  //         });\n  //       }\n  //     });\n  // });\n}\n\nexport function updateScore(gameID, userID, number) {\n  // return new Promise((resolve, reject) => {\n  //   db(`games/${gameID}`)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       const newGame = { ...game };\n  //       newGame.players =\n  //         newGame.players.length > 2\n  //           ? handleThreePlayerGame(userID, newGame.players, number)\n  //           : handleTwoPlayerGame(userID, newGame.players, number);\n  //       db(\"games/\" + gameID).set(newGame, error => {\n  //         if (error) {\n  //           console.error(\"error\", error);\n  //         }\n  //       });\n  //     });\n  // });\n}\n\nexport function resetScore(gameID, userID) {\n  // return new Promise((resolve, reject) => {\n  //   db(`games/${gameID}`)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       const newGame = { ...game };\n  //       newGame.players = newGame.players.map(player => {\n  //         if (player.id !== userID) {\n  //           return player;\n  //         }\n  //         return { ...player };\n  //       });\n  //       db(\"games/\" + gameID).set(newGame, error => {\n  //         if (error) {\n  //           console.error(\"error\", error);\n  //         }\n  //       });\n  //     });\n  // });\n}\n\nexport function newGame(gameID) {\n  // return new Promise((resolve, reject) => {\n  //   db(\"games/\" + gameID)\n  //     .once(\"value\")\n  //     .then(snapshot => {\n  //       const game = snapshot.val();\n  //       const newGame = { ...game };\n  //       newGame.players = newGame.players.map(player => {\n  //         return { ...player };\n  //       });\n  //       db(\"games/\" + gameID).set(newGame, error => {\n  //         if (error) {\n  //           console.error(\"error\", error);\n  //         }\n  //       });\n  //     });\n  // });\n}\n\nfunction handleTwoPlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  // let newPlayers = originalPlayers.slice();\n  // newPlayers = newPlayers.map(player => {\n  //   if (player.id !== userID) {\n  //     return player;\n  //   }\n  //   const newPlayer = { ...player };\n  //   const scoreForNumber = newPlayer.score[number];\n  //   if (scoreForNumber === 3) {\n  //     // Update other scores\n  //     newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n  //   } else {\n  //     newPlayer.score[number] = scoreForNumber + 1;\n  //   }\n  //   return { ...newPlayer };\n  // });\n  // return newPlayers;\n}\n\nfunction handleThreePlayerGame(\n  userID: string,\n  originalPlayers: Array<Player>,\n  number: string | number\n) {\n  // let newPlayers = originalPlayers.slice();\n  // const amAddingToOtherPlayers = newPlayers.some(player => {\n  //   if (player.id === userID && player.score[number] === 3) {\n  //     return true;\n  //   }\n  // });\n  // if (amAddingToOtherPlayers) {\n  //   newPlayers = newPlayers.map(player => {\n  //     const newPlayer = { ...player };\n  //     if (newPlayer.score[number] !== 3 && newPlayer.id !== userID) {\n  //       newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n  //     }\n  //     return { ...newPlayer };\n  //   });\n  // } else {\n  //   newPlayers = newPlayers.map(player => {\n  //     if (player.id !== userID) {\n  //       return player;\n  //     }\n  //     const newPlayer = { ...player };\n  //     const scoreForNumber = newPlayer.score[number];\n  //     newPlayer.score[number] = scoreForNumber + 1;\n  //     return { ...newPlayer };\n  //   });\n  // }\n  // return newPlayers;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AALA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}