{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\"; // DB types\n\nvar config = {\n  apiKey: \"AIzaSyDp01-0TwxRjNC05CuDcpauXRyLSMv0RRw\",\n  authDomain: \"darts-yeslab.firebaseapp.com\",\n  databaseURL: \"https://darts-yeslab.firebaseio.com\",\n  projectId: \"darts-yeslab\",\n  storageBucket: \"darts-yeslab.appspot.com\",\n  messagingSenderId: \"426404952698\",\n  appId: \"1:426404952698:web:738ac9ab1342a1177419c3\",\n  measurementId: \"G-7DHLMBZXEN\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nvar db = firebase.database();\nvar DEFAULT_SCORE = {\n  20: 0,\n  19: 0,\n  18: 0,\n  17: 0,\n  16: 0,\n  15: 0,\n  bull: 0,\n  total: 0\n};\nexport function getUser(userID) {\n  return db.ref(\"/users/\" + userID).once(\"value\").then(function (snapshot) {\n    var user = snapshot.val();\n\n    if (user) {\n      return _objectSpread({}, user, {\n        id: userID\n      });\n    }\n\n    return createUser(userID);\n  });\n}\n\nfunction createUser(userID) {\n  var user = {\n    created_at: Date.now()\n  };\n  return new Promise(function (resolve, reject) {\n    db.ref(\"users/\" + userID).set(user, function (error) {\n      if (error) {\n        reject(error);\n      }\n\n      resolve(_objectSpread({}, user, {\n        id: userID\n      }));\n    });\n  });\n}\n\nexport function getGame(gameID, userID, onUpdate) {\n  return new Promise(function (resolve, reject) {\n    db.ref(\"/games/\" + gameID).on(\"value\", function (snapshot) {\n      var game = snapshot.val();\n      onUpdate(game);\n    });\n  });\n}\nexport function getGameId(join_id) {\n  return new Promise(function (resolve, reject) {\n    db.ref(\"games\").orderByChild(\"join_id\").equalTo(join_id).on(\"value\", function (snapshot) {\n      snapshot.forEach(function (data) {\n        var id = data.key;\n\n        if (!id) {\n          reject(\"Game not found.\");\n        } else {\n          resolve(id);\n        }\n      });\n    });\n  });\n}\nexport function createGame(userID, name) {\n  var gameID = uuidv4();\n  var game = {\n    creator_id: userID,\n    join_id: gameID.slice(0, 4),\n    players: [{\n      id: userID,\n      name: name,\n      score: DEFAULT_SCORE\n    }]\n  };\n  return new Promise(function (resolve, reject) {\n    db.ref(\"games/\" + gameID).set(game, function (error) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(_objectSpread({}, game, {\n          id: gameID\n        }));\n      }\n    });\n  });\n}\nexport function addPlayerToGame(gameID, userID, name) {\n  return new Promise(function (resolve, reject) {\n    db.ref(\"games/\" + gameID).once(\"value\").then(function (snapshot) {\n      var game = snapshot.val();\n\n      if (!game.players.some(function (player) {\n        return player.id === userID;\n      })) {\n        var _newGame = _objectSpread({}, game, {\n          players: game.players.concat({\n            id: userID,\n            name: name,\n            score: DEFAULT_SCORE\n          })\n        });\n\n        db.ref(\"games/\" + gameID).update(_newGame, function (error) {\n          if (error) {\n            console.error(\"error\", error);\n          }\n        });\n      }\n    });\n  });\n}\nexport function updateScore(gameID, userID, number) {\n  return new Promise(function (resolve, reject) {\n    db.ref(\"games/\" + gameID).once(\"value\").then(function (snapshot) {\n      var game = snapshot.val();\n\n      var newGame = _objectSpread({}, game);\n\n      newGame.players = newGame.players.length > 2 ? handleThreePlayerGame(userID, newGame.players, number) : handleTwoPlayerGame(userID, newGame.players, number);\n      db.ref(\"games/\" + gameID).set(newGame, function (error) {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n  });\n}\nexport function resetScore(gameID, userID) {\n  return new Promise(function (resolve, reject) {\n    db.ref(\"games/\" + gameID).once(\"value\").then(function (snapshot) {\n      var game = snapshot.val();\n\n      var newGame = _objectSpread({}, game);\n\n      newGame.players = newGame.players.map(function (player) {\n        if (player.id !== userID) {\n          return player;\n        }\n\n        return _objectSpread({}, player, {\n          score: DEFAULT_SCORE\n        });\n      });\n      db.ref(\"games/\" + gameID).set(newGame, function (error) {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n  });\n}\nexport function newGame(gameID) {\n  return new Promise(function (resolve, reject) {\n    db.ref(\"games/\" + gameID).once(\"value\").then(function (snapshot) {\n      var game = snapshot.val();\n\n      var newGame = _objectSpread({}, game);\n\n      newGame.players = newGame.players.map(function (player) {\n        return _objectSpread({}, player, {\n          score: DEFAULT_SCORE\n        });\n      });\n      db.ref(\"games/\" + gameID).set(newGame, function (error) {\n        if (error) {\n          console.error(\"error\", error);\n        }\n      });\n    });\n  });\n}\n\nfunction handleTwoPlayerGame(userID, originalPlayers, number) {\n  var newPlayers = originalPlayers.slice();\n  newPlayers = newPlayers.map(function (player) {\n    if (player.id !== userID) {\n      return player;\n    }\n\n    var newPlayer = _objectSpread({}, player);\n\n    var scoreForNumber = newPlayer.score[number];\n\n    if (scoreForNumber === 3) {\n      // Update other scores\n      newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n    } else {\n      newPlayer.score[number] = scoreForNumber + 1;\n    }\n\n    return _objectSpread({}, newPlayer);\n  });\n  return newPlayers;\n}\n\nfunction handleThreePlayerGame(userID, originalPlayers, number) {\n  var newPlayers = originalPlayers.slice();\n  var amAddingToOtherPlayers = newPlayers.some(function (player) {\n    if (player.id === userID && player.score[number] === 3) {\n      return true;\n    }\n  });\n\n  if (amAddingToOtherPlayers) {\n    newPlayers = newPlayers.map(function (player) {\n      var newPlayer = _objectSpread({}, player);\n\n      if (newPlayer.score[number] !== 3 && newPlayer.id !== userID) {\n        newPlayer.score.total += typeof number === \"string\" ? 25 : number;\n      }\n\n      return _objectSpread({}, newPlayer);\n    });\n  } else {\n    newPlayers = newPlayers.map(function (player) {\n      if (player.id !== userID) {\n        return player;\n      }\n\n      var newPlayer = _objectSpread({}, player);\n\n      var scoreForNumber = newPlayer.score[number];\n      newPlayer.score[number] = scoreForNumber + 1;\n      return _objectSpread({}, newPlayer);\n    });\n  }\n\n  return newPlayers;\n}","map":null,"metadata":{},"sourceType":"module"}